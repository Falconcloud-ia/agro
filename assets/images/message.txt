import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:audioplayers/audioplayers.dart';

class EvaluacionDanoScreen extends StatefulWidget {
  final DocumentReference parcelaRef;
  final int totalRaices;

  const EvaluacionDanoScreen({
    super.key,
    required this.parcelaRef,
    required this.totalRaices,
  });

  @override
  State<EvaluacionDanoScreen> createState() => _EvaluacionDanoScreenState();
}

class _EvaluacionDanoScreenState extends State<EvaluacionDanoScreen> {
  final AudioPlayer player = AudioPlayer();
  final TextEditingController cantidadController = TextEditingController();
  Map<int, int> evaluaciones = {}; // nota -> cantidad
  String mensaje = '';

  @override
  void initState() {
    super.initState();
    cargarEvaluacionDesdeFirestore(); // <- aqu√≠ se carga la evaluaci√≥n previa
  }

  Widget _buildNotaButton(int nota) {
    return ElevatedButton(
      onPressed: faltan > 0 ? () => agregarEvaluacion(nota) : null,
      style: ElevatedButton.styleFrom(
        backgroundColor: const Color.fromARGB(255, 213, 182, 9),
        padding: const EdgeInsets.symmetric(horizontal: 150, vertical: 24),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
      child: Text(
        "$nota",
        style: const TextStyle(
          fontSize: 40,
          color: Color.fromARGB(255, 0, 0, 0),
        ),
      ),
    );
  }

  int get evaluadas => evaluaciones.values.fold(0, (a, b) => a + b);
  int get faltan => widget.totalRaices - evaluadas;

  Future<void> agregarEvaluacion(int nota) async {
    final cantidad = int.tryParse(cantidadController.text.trim());
    if (cantidad == null || cantidad <= 0 || cantidad > faltan) {
      setState(() {
        mensaje = "‚ö†Ô∏è Ingresa una cantidad v√°lida (restantes: $faltan).";
      });
      return;
    }

    setState(() {
      evaluaciones.update(
        nota,
        (value) => value + cantidad,
        ifAbsent: () => cantidad,
      );
      cantidadController.clear();
      mensaje = '';
    });

    // üîä Feedback sonoro
    await player.play(AssetSource('sounds/click.mp3'));
  }

  void borrarUltimo() {
    if (evaluaciones.isNotEmpty) {
      final ultimaClave = evaluaciones.keys.last;
      setState(() {
        evaluaciones.remove(ultimaClave);
      });
    }
  }

  void reiniciarEvaluacion() {
    setState(() {
      evaluaciones.clear();
      mensaje = '';
    });
  }

  Future<void> guardarEvaluacion() async {
    try {
      int suma = evaluaciones.entries
          .map((e) => e.key * e.value)
          .fold(0, (a, b) => a + b);

      double frecuencia =
          widget.totalRaices == 0 ? 0.0 : suma / (widget.totalRaices * 7);

      await widget.parcelaRef.update({
        "evaluacion": evaluaciones.map(
          (key, value) => MapEntry(key.toString(), value),
        ),
        "frecuencia_relativa": double.parse(frecuencia.toStringAsFixed(3)),
      });

      await player.play(AssetSource('sounds/done.mp3'));

      if (context.mounted) {
        showDialog(
          context: context,
          builder:
              (_) => AlertDialog(
                title: const Text("‚úÖ Guardado exitoso"),
                content: const Text(
                  "La evaluaci√≥n ha sido guardada correctamente.",
                ),
                actions: [
                  TextButton(
                    onPressed: () {
                      Navigator.of(context).pop(); // solo cierra modal
                    },
                    child: const Text("Aceptar"),
                  ),
                ],
              ),
        );
      }

      await cargarEvaluacionDesdeFirestore(); // Refresca evaluaci√≥n
    } catch (e) {
      setState(() => mensaje = "‚ùå Error al guardar: $e");
    }
  }

  Future<void> cargarEvaluacionDesdeFirestore() async {
    try {
      final doc = await widget.parcelaRef.get();
      final data = doc.data() as Map<String, dynamic>?;

      if (data != null && data['evaluacion'] != null) {
        final mapa = Map<String, dynamic>.from(data['evaluacion']);
        setState(() {
          evaluaciones = mapa.map((k, v) => MapEntry(int.parse(k), v as int));
        });
      }
    } catch (e) {
      setState(() => mensaje = "‚ùå Error al cargar evaluaci√≥n: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color.fromARGB(255, 0, 0, 0),
      appBar: AppBar(
        backgroundColor: Colors.white,
        title: const Text(
          "QUINLEI - Evaluaci√≥n de da√±o",
          style: TextStyle(color: Colors.black),
        ),
        iconTheme: const IconThemeData(color: Colors.black),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                "üî¢ Da√±o evaluado: $evaluadas / ${widget.totalRaices}",
                style: const TextStyle(color: Colors.white, fontSize: 18),
              ),
              Text(
                "‚è≥ Faltan: $faltan ra√≠ces",
                style: const TextStyle(color: Colors.white70, fontSize: 16),
              ),

              const SizedBox(height: 16),

              TextField(
                controller: cantidadController,
                readOnly: true,
                style: const TextStyle(color: Colors.white, fontSize: 22),
                decoration: InputDecoration(
                  labelText: "Cantidad de ra√≠ces",
                  labelStyle: const TextStyle(
                    color: Colors.white70,
                    fontSize: 18,
                  ),
                  filled: true,
                  fillColor: Colors.grey[850],
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(14),
                  ),
                ),
              ),

              const SizedBox(height: 32),

              Wrap(
                spacing: 16,
                runSpacing: 16,
                alignment: WrapAlignment.center,
                children: List.generate(10, (index) {
                  return SizedBox(
                    width: 70,
                    height: 70,
                    child: ElevatedButton(
                      onPressed: () {
                        setState(() {
                          cantidadController.text += index.toString();
                        });
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.deepPurpleAccent,
                        foregroundColor: Colors.white,
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(14),
                        ),
                      ),
                      child: Text(
                        "$index",
                        style: const TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  );
                }),
              ),

              const SizedBox(height: 12),

              SizedBox(
                width: double.infinity,
                child: ElevatedButton.icon(
                  onPressed: () {
                    setState(() {
                      final texto = cantidadController.text;
                      if (texto.isNotEmpty) {
                        cantidadController.text = texto.substring(
                          0,
                          texto.length - 1,
                        );
                      }
                    });
                  },
                  icon: const Icon(Icons.backspace),
                  label: const Text(
                    "Borrar d√≠gito",
                    style: TextStyle(fontSize: 18),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.redAccent,
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(14),
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 24),

              // Botones de nota
              Column(
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children:
                        [
                          7,
                          6,
                          5,
                        ].map((nota) => _buildNotaButton(nota)).toList(),
                  ),
                  const SizedBox(height: 12),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children:
                        [
                          4,
                          3,
                          2,
                        ].map((nota) => _buildNotaButton(nota)).toList(),
                  ),
                  const SizedBox(height: 12),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children:
                        [1, 0].map((nota) => _buildNotaButton(nota)).toList(),
                  ),
                ],
              ),

              const SizedBox(height: 20),

              Row(
                mainAxisAlignment: MainAxisAlignment.spaceAround,
                children: [
                  OutlinedButton.icon(
                    onPressed: borrarUltimo,
                    icon: const Icon(Icons.undo, color: Colors.red),
                    label: const Text(
                      "Borrar √∫ltimo",
                      style: TextStyle(color: Colors.white, fontSize: 16),
                    ),
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.white),
                      padding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                    ),
                  ),
                  OutlinedButton.icon(
                    onPressed: reiniciarEvaluacion,
                    icon: const Icon(Icons.restart_alt, color: Colors.white),
                    label: const Text(
                      "Reiniciar",
                      style: TextStyle(color: Colors.white, fontSize: 16),
                    ),
                    style: OutlinedButton.styleFrom(
                      side: const BorderSide(color: Colors.white),
                      padding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 12,
                      ),
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 24),
              const Divider(color: Colors.white38),

              Text(
                "üìä Frecuencia acumulada",
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                  color: Colors.white,
                  fontSize: 20,
                ),
              ),

              const SizedBox(height: 10),

              // Frecuencia acumulada con barras
              if (evaluaciones.isNotEmpty)
                Column(
                  children:
                      evaluaciones.entries.map((entry) {
                        final nota = entry.key;
                        final cantidad = entry.value;
                        final porcentaje = cantidad / widget.totalRaices;
                        final porcentajeTexto = (porcentaje * 100)
                            .toStringAsFixed(1);

                        return Padding(
                          padding: const EdgeInsets.symmetric(vertical: 10),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                "Nota $nota  ‚Ä¢  $cantidad ra√≠ces  ‚Ä¢  $porcentajeTexto%",
                                style: const TextStyle(
                                  color: Colors.white,
                                  fontSize: 18,
                                  fontWeight: FontWeight.w500,
                                ),
                              ),
                              const SizedBox(height: 6),
                              ClipRRect(
                                borderRadius: BorderRadius.circular(10),
                                child: LinearProgressIndicator(
                                  value: porcentaje.clamp(0.0, 1.0),
                                  minHeight: 14,
                                  backgroundColor: Colors.white12,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    Colors.lightGreenAccent.shade200,
                                  ),
                                ),
                              ),
                            ],
                          ),
                        );
                      }).toList(),
                )
              else
                const Padding(
                  padding: EdgeInsets.symmetric(vertical: 16),
                  child: Text(
                    "Sin datos a√∫n.",
                    style: TextStyle(color: Colors.white54, fontSize: 18),
                  ),
                ),

              const SizedBox(height: 20),

              // Guardar evaluaci√≥n
              SizedBox(
                width: double.infinity,
                height: 60,
                child: ElevatedButton.icon(
                  onPressed: guardarEvaluacion,
                  icon: const Icon(Icons.save),
                  label: const Text(
                    "Guardar evaluaci√≥n",
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF04bc04),
                    foregroundColor: Colors.white,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(14),
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 10),

              if (mensaje.isNotEmpty)
                Text(
                  mensaje,
                  style: TextStyle(
                    fontSize: 16,
                    color:
                        mensaje.startsWith("‚úÖ")
                            ? Colors.greenAccent
                            : Colors.red,
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
