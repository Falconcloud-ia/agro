import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:hive/hive.dart';

import '../../config/hive_config.dart';
import '../../firebase_options.dart';
import '../../services/firestore_hive_sync_service.dart';
import '../../services/hive_firestore_sync_service.dart';
import 'package:path_provider/path_provider.dart' as path_provider;

@pragma('vm:entry-point')
void backgroundCallbackDispatcher() {
  Future.microtask(() async {
    print('‚è∞ Ejecutando tarea peri√≥dica...');

    try {
      // Inicializar Firebase
      await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

      // üîπ Inicializar Hive con path manual
      final dir = await path_provider.getApplicationDocumentsDirectory();
      Hive.init(dir.path);

      // üîπ Abrir cajas necesarias
      await HiveConfig.openBoxes();

      // üîπ Acceder a la configuraci√≥n de sincronizaci√≥n
      final configBox = Hive.box('sync_local');

      final hiveToCloud = HiveToFirestoreSyncService();
      final cloudToHive = FirestoreToHiveSyncService();

      if (esHoraDeSincronizar(configBox)) {
        print('‚úÖ Comienza sincronizaci√≥n');

        await hiveToCloud.sync();   // SYNC2
        await cloudToHive.sync();   // SYNC1
        actualizarHoraSync(configBox);
      }else{
        print('‚ùå Error en backgroundCallbackDispatcher no sync');

      }
    } catch (e, stack) {
      print('‚ùå Error en backgroundCallbackDispatcher: $e\n$stack');
    }
  });
}

/// Eval√∫a si han pasado m√°s de 30 minutos desde la √∫ltima sincronizaci√≥n
bool esHoraDeSincronizar(Box configBox) {
  final lastSync = configBox.get('lastSync') as DateTime?;
  //return lastSync == null || DateTime.now().difference(lastSync) > Duration(minutes: 30);
  return 1 == 1;
}

/// Actualiza el timestamp de la √∫ltima sincronizaci√≥n
void actualizarHoraSync(Box configBox) {
  configBox.put('lastSync', DateTime.now());
}
